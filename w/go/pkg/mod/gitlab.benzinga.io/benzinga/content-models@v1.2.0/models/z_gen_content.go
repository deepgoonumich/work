package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Asset) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = AssetType(zb0002)
			}
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "MIME":
			z.MIME, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "MIME")
				return
			}
		case "Primary":
			z.Primary, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Primary")
				return
			}
		case "Copyright":
			z.Copyright, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "URL":
			z.URL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "Attributes":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Attributes")
					return
				}
				z.Attributes = nil
			} else {
				if z.Attributes == nil {
					z.Attributes = new(AssetAttributes)
				}
				err = z.Attributes.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Attributes")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Asset) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Type"
	err = en.Append(0x87, 0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Type))
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "MIME"
	err = en.Append(0xa4, 0x4d, 0x49, 0x4d, 0x45)
	if err != nil {
		return
	}
	err = en.WriteString(z.MIME)
	if err != nil {
		err = msgp.WrapError(err, "MIME")
		return
	}
	// write "Primary"
	err = en.Append(0xa7, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Primary)
	if err != nil {
		err = msgp.WrapError(err, "Primary")
		return
	}
	// write "Copyright"
	err = en.Append(0xa9, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Copyright)
	if err != nil {
		err = msgp.WrapError(err, "Copyright")
		return
	}
	// write "URL"
	err = en.Append(0xa3, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.URL)
	if err != nil {
		err = msgp.WrapError(err, "URL")
		return
	}
	// write "Attributes"
	err = en.Append(0xaa, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.Attributes == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Attributes.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Attributes")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Asset) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Type"
	o = append(o, 0x87, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, string(z.Type))
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "MIME"
	o = append(o, 0xa4, 0x4d, 0x49, 0x4d, 0x45)
	o = msgp.AppendString(o, z.MIME)
	// string "Primary"
	o = append(o, 0xa7, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79)
	o = msgp.AppendBool(o, z.Primary)
	// string "Copyright"
	o = append(o, 0xa9, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendString(o, z.Copyright)
	// string "URL"
	o = append(o, 0xa3, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.URL)
	// string "Attributes"
	o = append(o, 0xaa, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if z.Attributes == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Attributes.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Attributes")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Asset) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Type":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Type")
					return
				}
				z.Type = AssetType(zb0002)
			}
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "MIME":
			z.MIME, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MIME")
				return
			}
		case "Primary":
			z.Primary, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Primary")
				return
			}
		case "Copyright":
			z.Copyright, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "URL":
			z.URL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URL")
				return
			}
		case "Attributes":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Attributes = nil
			} else {
				if z.Attributes == nil {
					z.Attributes = new(AssetAttributes)
				}
				bts, err = z.Attributes.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Attributes")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Asset) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(string(z.Type)) + 6 + msgp.StringPrefixSize + len(z.Title) + 5 + msgp.StringPrefixSize + len(z.MIME) + 8 + msgp.BoolSize + 10 + msgp.StringPrefixSize + len(z.Copyright) + 4 + msgp.StringPrefixSize + len(z.URL) + 11
	if z.Attributes == nil {
		s += msgp.NilSize
	} else {
		s += z.Attributes.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AssetAttributes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FID":
			z.FID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "FID")
				return
			}
		case "Filename":
			z.Filename, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Filename")
				return
			}
		case "Filepath":
			z.Filepath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Filepath")
				return
			}
		case "Filesize":
			z.Filesize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Filesize")
				return
			}
		case "ImageAttributes":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ImageAttributes")
					return
				}
				z.ImageAttributes = nil
			} else {
				if z.ImageAttributes == nil {
					z.ImageAttributes = new(ImageAttributes)
				}
				err = z.ImageAttributes.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ImageAttributes")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AssetAttributes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "FID"
	err = en.Append(0x85, 0xa3, 0x46, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.FID)
	if err != nil {
		err = msgp.WrapError(err, "FID")
		return
	}
	// write "Filename"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Filename)
	if err != nil {
		err = msgp.WrapError(err, "Filename")
		return
	}
	// write "Filepath"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Filepath)
	if err != nil {
		err = msgp.WrapError(err, "Filepath")
		return
	}
	// write "Filesize"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Filesize)
	if err != nil {
		err = msgp.WrapError(err, "Filesize")
		return
	}
	// write "ImageAttributes"
	err = en.Append(0xaf, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	if z.ImageAttributes == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.ImageAttributes.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ImageAttributes")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AssetAttributes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "FID"
	o = append(o, 0x85, 0xa3, 0x46, 0x49, 0x44)
	o = msgp.AppendString(o, z.FID)
	// string "Filename"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Filename)
	// string "Filepath"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Filepath)
	// string "Filesize"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Filesize)
	// string "ImageAttributes"
	o = append(o, 0xaf, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73)
	if z.ImageAttributes == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.ImageAttributes.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ImageAttributes")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetAttributes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "FID":
			z.FID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FID")
				return
			}
		case "Filename":
			z.Filename, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filename")
				return
			}
		case "Filepath":
			z.Filepath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filepath")
				return
			}
		case "Filesize":
			z.Filesize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filesize")
				return
			}
		case "ImageAttributes":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ImageAttributes = nil
			} else {
				if z.ImageAttributes == nil {
					z.ImageAttributes = new(ImageAttributes)
				}
				bts, err = z.ImageAttributes.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ImageAttributes")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AssetAttributes) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.FID) + 9 + msgp.StringPrefixSize + len(z.Filename) + 9 + msgp.StringPrefixSize + len(z.Filepath) + 9 + msgp.Int64Size + 16
	if z.ImageAttributes == nil {
		s += msgp.NilSize
	} else {
		s += z.ImageAttributes.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AssetType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AssetType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AssetType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AssetType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AssetType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = AssetType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AssetType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Category) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Vocab":
			{
				var zb0002 int
				zb0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Vocab")
					return
				}
				z.Vocab = Vocab(zb0002)
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Primary":
			z.Primary, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Primary")
				return
			}
		case "Price":
			z.Price, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		case "Sectors":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sectors")
				return
			}
			if z.Sectors == nil {
				z.Sectors = make(map[string]int, zb0003)
			} else if len(z.Sectors) > 0 {
				for key := range z.Sectors {
					delete(z.Sectors, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0001 string
				var za0002 int
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Sectors")
					return
				}
				za0002, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Sectors", za0001)
					return
				}
				z.Sectors[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Category) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "ID"
	err = en.Append(0x88, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Vocab"
	err = en.Append(0xa5, 0x56, 0x6f, 0x63, 0x61, 0x62)
	if err != nil {
		return
	}
	err = en.WriteInt(int(z.Vocab))
	if err != nil {
		err = msgp.WrapError(err, "Vocab")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Description"
	err = en.Append(0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "Primary"
	err = en.Append(0xa7, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Primary)
	if err != nil {
		err = msgp.WrapError(err, "Primary")
		return
	}
	// write "Price"
	err = en.Append(0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "Volume"
	err = en.Append(0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Volume)
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	// write "Sectors"
	err = en.Append(0xa7, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Sectors)))
	if err != nil {
		err = msgp.WrapError(err, "Sectors")
		return
	}
	for za0001, za0002 := range z.Sectors {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Sectors")
			return
		}
		err = en.WriteInt(za0002)
		if err != nil {
			err = msgp.WrapError(err, "Sectors", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Category) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "ID"
	o = append(o, 0x88, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt(o, z.ID)
	// string "Vocab"
	o = append(o, 0xa5, 0x56, 0x6f, 0x63, 0x61, 0x62)
	o = msgp.AppendInt(o, int(z.Vocab))
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Description"
	o = append(o, 0xab, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "Primary"
	o = append(o, 0xa7, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79)
	o = msgp.AppendBool(o, z.Primary)
	// string "Price"
	o = append(o, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Price)
	// string "Volume"
	o = append(o, 0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Volume)
	// string "Sectors"
	o = append(o, 0xa7, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Sectors)))
	for za0001, za0002 := range z.Sectors {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendInt(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Category) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Vocab":
			{
				var zb0002 int
				zb0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Vocab")
					return
				}
				z.Vocab = Vocab(zb0002)
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "Primary":
			z.Primary, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Primary")
				return
			}
		case "Price":
			z.Price, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		case "Sectors":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sectors")
				return
			}
			if z.Sectors == nil {
				z.Sectors = make(map[string]int, zb0003)
			} else if len(z.Sectors) > 0 {
				for key := range z.Sectors {
					delete(z.Sectors, key)
				}
			}
			for zb0003 > 0 {
				var za0001 string
				var za0002 int
				zb0003--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sectors")
					return
				}
				za0002, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sectors", za0001)
					return
				}
				z.Sectors[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Category) Msgsize() (s int) {
	s = 1 + 3 + msgp.IntSize + 6 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Name) + 12 + msgp.StringPrefixSize + len(z.Description) + 8 + msgp.BoolSize + 6 + msgp.StringPrefixSize + len(z.Price) + 7 + msgp.IntSize + 8 + msgp.MapHeaderSize
	if z.Sectors != nil {
		for za0001, za0002 := range z.Sectors {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.IntSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Content) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			{
				var zb0002 []byte
				zb0002, err = dc.ReadBytes([]byte(z.ID))
				if err != nil {
					err = msgp.WrapError(err, "ID")
					return
				}
				z.ID = IDFromBytes(zb0002)
			}
		case "EventID":
			{
				var zb0003 []byte
				zb0003, err = dc.ReadBytes([]byte(z.EventID))
				if err != nil {
					err = msgp.WrapError(err, "EventID")
					return
				}
				z.EventID = IDFromBytes(zb0003)
			}
		case "NodeID":
			z.NodeID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "UserID":
			z.UserID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "VersionID":
			z.VersionID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "Type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Published":
			z.Published, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "CreatedAt":
			err = z.CreatedAt.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "UpdatedAt":
			err = z.UpdatedAt.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Body":
			z.Body, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "Author":
			z.Author, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
		case "Assets":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Assets")
				return
			}
			if cap(z.Assets) >= int(zb0004) {
				z.Assets = (z.Assets)[:zb0004]
			} else {
				z.Assets = make([]Asset, zb0004)
			}
			for za0001 := range z.Assets {
				err = z.Assets[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Assets", za0001)
					return
				}
			}
		case "PartnerURL":
			z.PartnerURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "PartnerURL")
				return
			}
		case "TeaserText":
			z.TeaserText, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TeaserText")
				return
			}
		case "Tags":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0005) {
				z.Tags = (z.Tags)[:zb0005]
			} else {
				z.Tags = make([]Category, zb0005)
			}
			for za0002 := range z.Tags {
				err = z.Tags[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0002)
					return
				}
			}
		case "Tickers":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Tickers")
				return
			}
			if cap(z.Tickers) >= int(zb0006) {
				z.Tickers = (z.Tickers)[:zb0006]
			} else {
				z.Tickers = make([]Category, zb0006)
			}
			for za0003 := range z.Tickers {
				err = z.Tickers[za0003].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Tickers", za0003)
					return
				}
			}
		case "Futures":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Futures")
				return
			}
			if cap(z.Futures) >= int(zb0007) {
				z.Futures = (z.Futures)[:zb0007]
			} else {
				z.Futures = make([]Category, zb0007)
			}
			for za0004 := range z.Futures {
				err = z.Futures[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Futures", za0004)
					return
				}
			}
		case "Channels":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Channels")
				return
			}
			if cap(z.Channels) >= int(zb0008) {
				z.Channels = (z.Channels)[:zb0008]
			} else {
				z.Channels = make([]Category, zb0008)
			}
			for za0005 := range z.Channels {
				err = z.Channels[za0005].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Channels", za0005)
					return
				}
			}
		case "Quotes":
			var zb0009 uint32
			zb0009, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Quotes")
				return
			}
			if z.Quotes == nil {
				z.Quotes = make(map[string]Quote, zb0009)
			} else if len(z.Quotes) > 0 {
				for key := range z.Quotes {
					delete(z.Quotes, key)
				}
			}
			for zb0009 > 0 {
				zb0009--
				var za0006 string
				var za0007 Quote
				za0006, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Quotes")
					return
				}
				var zb0010 uint32
				zb0010, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Quotes", za0006)
					return
				}
				for zb0010 > 0 {
					zb0010--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Quotes", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Price":
						za0007.Price, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006, "Price")
							return
						}
					case "Volume":
						za0007.Volume, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006, "Volume")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006)
							return
						}
					}
				}
				z.Quotes[za0006] = za0007
			}
		case "IsBzPost":
			z.IsBzPost, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsBzPost")
				return
			}
		case "IsBzProPost":
			z.IsBzProPost, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "IsBzProPost")
				return
			}
		case "DoNotDistribute":
			z.DoNotDistribute, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "DoNotDistribute")
				return
			}
		case "Sentiment":
			z.Sentiment, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Sentiment")
				return
			}
		case "Meta":
			err = z.Meta.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Meta")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Content) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 25
	// write "ID"
	err = en.Append(0xde, 0x0, 0x19, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(IDToBytes(z.ID))
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "EventID"
	err = en.Append(0xa7, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteBytes(IDToBytes(z.EventID))
	if err != nil {
		err = msgp.WrapError(err, "EventID")
		return
	}
	// write "NodeID"
	err = en.Append(0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "UserID"
	err = en.Append(0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.UserID)
	if err != nil {
		err = msgp.WrapError(err, "UserID")
		return
	}
	// write "VersionID"
	err = en.Append(0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.VersionID)
	if err != nil {
		err = msgp.WrapError(err, "VersionID")
		return
	}
	// write "Type"
	err = en.Append(0xa4, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	// write "Published"
	err = en.Append(0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Published)
	if err != nil {
		err = msgp.WrapError(err, "Published")
		return
	}
	// write "CreatedAt"
	err = en.Append(0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = z.CreatedAt.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "UpdatedAt"
	err = en.Append(0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = z.UpdatedAt.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "UpdatedAt")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	// write "Body"
	err = en.Append(0xa4, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	// write "Author"
	err = en.Append(0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Author)
	if err != nil {
		err = msgp.WrapError(err, "Author")
		return
	}
	// write "Assets"
	err = en.Append(0xa6, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Assets)))
	if err != nil {
		err = msgp.WrapError(err, "Assets")
		return
	}
	for za0001 := range z.Assets {
		err = z.Assets[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Assets", za0001)
			return
		}
	}
	// write "PartnerURL"
	err = en.Append(0xaa, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c)
	if err != nil {
		return
	}
	err = en.WriteString(z.PartnerURL)
	if err != nil {
		err = msgp.WrapError(err, "PartnerURL")
		return
	}
	// write "TeaserText"
	err = en.Append(0xaa, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.TeaserText)
	if err != nil {
		err = msgp.WrapError(err, "TeaserText")
		return
	}
	// write "Tags"
	err = en.Append(0xa4, 0x54, 0x61, 0x67, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Tags)))
	if err != nil {
		err = msgp.WrapError(err, "Tags")
		return
	}
	for za0002 := range z.Tags {
		err = z.Tags[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0002)
			return
		}
	}
	// write "Tickers"
	err = en.Append(0xa7, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Tickers)))
	if err != nil {
		err = msgp.WrapError(err, "Tickers")
		return
	}
	for za0003 := range z.Tickers {
		err = z.Tickers[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Tickers", za0003)
			return
		}
	}
	// write "Futures"
	err = en.Append(0xa7, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Futures)))
	if err != nil {
		err = msgp.WrapError(err, "Futures")
		return
	}
	for za0004 := range z.Futures {
		err = z.Futures[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Futures", za0004)
			return
		}
	}
	// write "Channels"
	err = en.Append(0xa8, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Channels)))
	if err != nil {
		err = msgp.WrapError(err, "Channels")
		return
	}
	for za0005 := range z.Channels {
		err = z.Channels[za0005].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Channels", za0005)
			return
		}
	}
	// write "Quotes"
	err = en.Append(0xa6, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Quotes)))
	if err != nil {
		err = msgp.WrapError(err, "Quotes")
		return
	}
	for za0006, za0007 := range z.Quotes {
		err = en.WriteString(za0006)
		if err != nil {
			err = msgp.WrapError(err, "Quotes")
			return
		}
		// map header, size 2
		// write "Price"
		err = en.Append(0x82, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(za0007.Price)
		if err != nil {
			err = msgp.WrapError(err, "Quotes", za0006, "Price")
			return
		}
		// write "Volume"
		err = en.Append(0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(za0007.Volume)
		if err != nil {
			err = msgp.WrapError(err, "Quotes", za0006, "Volume")
			return
		}
	}
	// write "IsBzPost"
	err = en.Append(0xa8, 0x49, 0x73, 0x42, 0x7a, 0x50, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsBzPost)
	if err != nil {
		err = msgp.WrapError(err, "IsBzPost")
		return
	}
	// write "IsBzProPost"
	err = en.Append(0xab, 0x49, 0x73, 0x42, 0x7a, 0x50, 0x72, 0x6f, 0x50, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.IsBzProPost)
	if err != nil {
		err = msgp.WrapError(err, "IsBzProPost")
		return
	}
	// write "DoNotDistribute"
	err = en.Append(0xaf, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.DoNotDistribute)
	if err != nil {
		err = msgp.WrapError(err, "DoNotDistribute")
		return
	}
	// write "Sentiment"
	err = en.Append(0xa9, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Sentiment)
	if err != nil {
		err = msgp.WrapError(err, "Sentiment")
		return
	}
	// write "Meta"
	err = en.Append(0xa4, 0x4d, 0x65, 0x74, 0x61)
	if err != nil {
		return
	}
	err = z.Meta.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Content) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 25
	// string "ID"
	o = append(o, 0xde, 0x0, 0x19, 0xa2, 0x49, 0x44)
	o = msgp.AppendBytes(o, IDToBytes(z.ID))
	// string "EventID"
	o = append(o, 0xa7, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x44)
	o = msgp.AppendBytes(o, IDToBytes(z.EventID))
	// string "NodeID"
	o = append(o, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44)
	o = msgp.AppendInt(o, z.NodeID)
	// string "UserID"
	o = append(o, 0xa6, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44)
	o = msgp.AppendInt(o, z.UserID)
	// string "VersionID"
	o = append(o, 0xa9, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendInt(o, z.VersionID)
	// string "Type"
	o = append(o, 0xa4, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	// string "Published"
	o = append(o, 0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	o = msgp.AppendBool(o, z.Published)
	// string "CreatedAt"
	o = append(o, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o, err = z.CreatedAt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// string "UpdatedAt"
	o = append(o, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o, err = z.UpdatedAt.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "UpdatedAt")
		return
	}
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	// string "Body"
	o = append(o, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendString(o, z.Body)
	// string "Author"
	o = append(o, 0xa6, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Author)
	// string "Assets"
	o = append(o, 0xa6, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Assets)))
	for za0001 := range z.Assets {
		o, err = z.Assets[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Assets", za0001)
			return
		}
	}
	// string "PartnerURL"
	o = append(o, 0xaa, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x55, 0x52, 0x4c)
	o = msgp.AppendString(o, z.PartnerURL)
	// string "TeaserText"
	o = append(o, 0xaa, 0x54, 0x65, 0x61, 0x73, 0x65, 0x72, 0x54, 0x65, 0x78, 0x74)
	o = msgp.AppendString(o, z.TeaserText)
	// string "Tags"
	o = append(o, 0xa4, 0x54, 0x61, 0x67, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tags)))
	for za0002 := range z.Tags {
		o, err = z.Tags[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Tags", za0002)
			return
		}
	}
	// string "Tickers"
	o = append(o, 0xa7, 0x54, 0x69, 0x63, 0x6b, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Tickers)))
	for za0003 := range z.Tickers {
		o, err = z.Tickers[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Tickers", za0003)
			return
		}
	}
	// string "Futures"
	o = append(o, 0xa7, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Futures)))
	for za0004 := range z.Futures {
		o, err = z.Futures[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Futures", za0004)
			return
		}
	}
	// string "Channels"
	o = append(o, 0xa8, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Channels)))
	for za0005 := range z.Channels {
		o, err = z.Channels[za0005].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Channels", za0005)
			return
		}
	}
	// string "Quotes"
	o = append(o, 0xa6, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Quotes)))
	for za0006, za0007 := range z.Quotes {
		o = msgp.AppendString(o, za0006)
		// map header, size 2
		// string "Price"
		o = append(o, 0x82, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
		o = msgp.AppendString(o, za0007.Price)
		// string "Volume"
		o = append(o, 0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
		o = msgp.AppendInt(o, za0007.Volume)
	}
	// string "IsBzPost"
	o = append(o, 0xa8, 0x49, 0x73, 0x42, 0x7a, 0x50, 0x6f, 0x73, 0x74)
	o = msgp.AppendBool(o, z.IsBzPost)
	// string "IsBzProPost"
	o = append(o, 0xab, 0x49, 0x73, 0x42, 0x7a, 0x50, 0x72, 0x6f, 0x50, 0x6f, 0x73, 0x74)
	o = msgp.AppendBool(o, z.IsBzProPost)
	// string "DoNotDistribute"
	o = append(o, 0xaf, 0x44, 0x6f, 0x4e, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65)
	o = msgp.AppendBool(o, z.DoNotDistribute)
	// string "Sentiment"
	o = append(o, 0xa9, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Sentiment)
	// string "Meta"
	o = append(o, 0xa4, 0x4d, 0x65, 0x74, 0x61)
	o, err = z.Meta.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Meta")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Content) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			{
				var zb0002 []byte
				zb0002, bts, err = msgp.ReadBytesBytes(bts, IDToBytes(z.ID))
				if err != nil {
					err = msgp.WrapError(err, "ID")
					return
				}
				z.ID = IDFromBytes(zb0002)
			}
		case "EventID":
			{
				var zb0003 []byte
				zb0003, bts, err = msgp.ReadBytesBytes(bts, IDToBytes(z.EventID))
				if err != nil {
					err = msgp.WrapError(err, "EventID")
					return
				}
				z.EventID = IDFromBytes(zb0003)
			}
		case "NodeID":
			z.NodeID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "UserID":
			z.UserID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UserID")
				return
			}
		case "VersionID":
			z.VersionID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionID")
				return
			}
		case "Type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		case "Published":
			z.Published, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "CreatedAt":
			bts, err = z.CreatedAt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "UpdatedAt":
			bts, err = z.UpdatedAt.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		case "Body":
			z.Body, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "Author":
			z.Author, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Author")
				return
			}
		case "Assets":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Assets")
				return
			}
			if cap(z.Assets) >= int(zb0004) {
				z.Assets = (z.Assets)[:zb0004]
			} else {
				z.Assets = make([]Asset, zb0004)
			}
			for za0001 := range z.Assets {
				bts, err = z.Assets[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Assets", za0001)
					return
				}
			}
		case "PartnerURL":
			z.PartnerURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PartnerURL")
				return
			}
		case "TeaserText":
			z.TeaserText, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TeaserText")
				return
			}
		case "Tags":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tags")
				return
			}
			if cap(z.Tags) >= int(zb0005) {
				z.Tags = (z.Tags)[:zb0005]
			} else {
				z.Tags = make([]Category, zb0005)
			}
			for za0002 := range z.Tags {
				bts, err = z.Tags[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tags", za0002)
					return
				}
			}
		case "Tickers":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Tickers")
				return
			}
			if cap(z.Tickers) >= int(zb0006) {
				z.Tickers = (z.Tickers)[:zb0006]
			} else {
				z.Tickers = make([]Category, zb0006)
			}
			for za0003 := range z.Tickers {
				bts, err = z.Tickers[za0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Tickers", za0003)
					return
				}
			}
		case "Futures":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Futures")
				return
			}
			if cap(z.Futures) >= int(zb0007) {
				z.Futures = (z.Futures)[:zb0007]
			} else {
				z.Futures = make([]Category, zb0007)
			}
			for za0004 := range z.Futures {
				bts, err = z.Futures[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Futures", za0004)
					return
				}
			}
		case "Channels":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Channels")
				return
			}
			if cap(z.Channels) >= int(zb0008) {
				z.Channels = (z.Channels)[:zb0008]
			} else {
				z.Channels = make([]Category, zb0008)
			}
			for za0005 := range z.Channels {
				bts, err = z.Channels[za0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Channels", za0005)
					return
				}
			}
		case "Quotes":
			var zb0009 uint32
			zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Quotes")
				return
			}
			if z.Quotes == nil {
				z.Quotes = make(map[string]Quote, zb0009)
			} else if len(z.Quotes) > 0 {
				for key := range z.Quotes {
					delete(z.Quotes, key)
				}
			}
			for zb0009 > 0 {
				var za0006 string
				var za0007 Quote
				zb0009--
				za0006, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Quotes")
					return
				}
				var zb0010 uint32
				zb0010, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Quotes", za0006)
					return
				}
				for zb0010 > 0 {
					zb0010--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Quotes", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "Price":
						za0007.Price, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006, "Price")
							return
						}
					case "Volume":
						za0007.Volume, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006, "Volume")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Quotes", za0006)
							return
						}
					}
				}
				z.Quotes[za0006] = za0007
			}
		case "IsBzPost":
			z.IsBzPost, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsBzPost")
				return
			}
		case "IsBzProPost":
			z.IsBzProPost, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IsBzProPost")
				return
			}
		case "DoNotDistribute":
			z.DoNotDistribute, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DoNotDistribute")
				return
			}
		case "Sentiment":
			z.Sentiment, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sentiment")
				return
			}
		case "Meta":
			bts, err = z.Meta.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Meta")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Content) Msgsize() (s int) {
	s = 3 + 3 + msgp.BytesPrefixSize + len(IDToBytes(z.ID)) + 8 + msgp.BytesPrefixSize + len(IDToBytes(z.EventID)) + 7 + msgp.IntSize + 7 + msgp.IntSize + 10 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Type) + 10 + msgp.BoolSize + 10 + z.CreatedAt.Msgsize() + 10 + z.UpdatedAt.Msgsize() + 6 + msgp.StringPrefixSize + len(z.Title) + 5 + msgp.StringPrefixSize + len(z.Body) + 7 + msgp.StringPrefixSize + len(z.Author) + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Assets {
		s += z.Assets[za0001].Msgsize()
	}
	s += 11 + msgp.StringPrefixSize + len(z.PartnerURL) + 11 + msgp.StringPrefixSize + len(z.TeaserText) + 5 + msgp.ArrayHeaderSize
	for za0002 := range z.Tags {
		s += z.Tags[za0002].Msgsize()
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0003 := range z.Tickers {
		s += z.Tickers[za0003].Msgsize()
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0004 := range z.Futures {
		s += z.Futures[za0004].Msgsize()
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0005 := range z.Channels {
		s += z.Channels[za0005].Msgsize()
	}
	s += 7 + msgp.MapHeaderSize
	if z.Quotes != nil {
		for za0006, za0007 := range z.Quotes {
			_ = za0007
			s += msgp.StringPrefixSize + len(za0006) + 1 + 6 + msgp.StringPrefixSize + len(za0007.Price) + 7 + msgp.IntSize
		}
	}
	s += 9 + msgp.BoolSize + 12 + msgp.BoolSize + 16 + msgp.BoolSize + 10 + msgp.IntSize + 5 + z.Meta.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FieldImage) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UploadIdentifier":
			z.UploadIdentifier, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UploadIdentifier")
				return
			}
		case "Fid":
			z.Fid, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Fid")
				return
			}
		case "Data":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Alt":
					z.Data.Alt, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Data", "Alt")
						return
					}
				case "Title":
					z.Data.Title, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Data", "Title")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Data")
						return
					}
				}
			}
		case "List":
			z.List, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "List")
				return
			}
		case "UID":
			z.UID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "Filename":
			z.Filename, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Filename")
				return
			}
		case "Filepath":
			z.Filepath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Filepath")
				return
			}
		case "Filemime":
			z.Filemime, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Filemime")
				return
			}
		case "Filesize":
			z.Filesize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Filesize")
				return
			}
		case "Status":
			z.Status, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Timestamp":
			z.Timestamp, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "Alt":
			z.Alt, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Alt")
				return
			}
		case "Title":
			z.Title, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FieldImage) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 13
	// write "UploadIdentifier"
	err = en.Append(0x8d, 0xb0, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.UploadIdentifier)
	if err != nil {
		err = msgp.WrapError(err, "UploadIdentifier")
		return
	}
	// write "Fid"
	err = en.Append(0xa3, 0x46, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.Fid)
	if err != nil {
		err = msgp.WrapError(err, "Fid")
		return
	}
	// write "Data"
	// map header, size 2
	// write "Alt"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61, 0x82, 0xa3, 0x41, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data.Alt)
	if err != nil {
		err = msgp.WrapError(err, "Data", "Alt")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data.Title)
	if err != nil {
		err = msgp.WrapError(err, "Data", "Title")
		return
	}
	// write "List"
	err = en.Append(0xa4, 0x4c, 0x69, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.List)
	if err != nil {
		err = msgp.WrapError(err, "List")
		return
	}
	// write "UID"
	err = en.Append(0xa3, 0x55, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.UID)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	// write "Filename"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Filename)
	if err != nil {
		err = msgp.WrapError(err, "Filename")
		return
	}
	// write "Filepath"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Filepath)
	if err != nil {
		err = msgp.WrapError(err, "Filepath")
		return
	}
	// write "Filemime"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Filemime)
	if err != nil {
		err = msgp.WrapError(err, "Filemime")
		return
	}
	// write "Filesize"
	err = en.Append(0xa8, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Filesize)
	if err != nil {
		err = msgp.WrapError(err, "Filesize")
		return
	}
	// write "Status"
	err = en.Append(0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "Timestamp"
	err = en.Append(0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// write "Alt"
	err = en.Append(0xa3, 0x41, 0x6c, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Alt)
	if err != nil {
		err = msgp.WrapError(err, "Alt")
		return
	}
	// write "Title"
	err = en.Append(0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Title)
	if err != nil {
		err = msgp.WrapError(err, "Title")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FieldImage) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 13
	// string "UploadIdentifier"
	o = append(o, 0x8d, 0xb0, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, z.UploadIdentifier)
	// string "Fid"
	o = append(o, 0xa3, 0x46, 0x69, 0x64)
	o = msgp.AppendString(o, z.Fid)
	// string "Data"
	// map header, size 2
	// string "Alt"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61, 0x82, 0xa3, 0x41, 0x6c, 0x74)
	o = msgp.AppendString(o, z.Data.Alt)
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Data.Title)
	// string "List"
	o = append(o, 0xa4, 0x4c, 0x69, 0x73, 0x74)
	o = msgp.AppendString(o, z.List)
	// string "UID"
	o = append(o, 0xa3, 0x55, 0x49, 0x44)
	o = msgp.AppendString(o, z.UID)
	// string "Filename"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Filename)
	// string "Filepath"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x70, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.Filepath)
	// string "Filemime"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x6d, 0x69, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Filemime)
	// string "Filesize"
	o = append(o, 0xa8, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendInt64(o, z.Filesize)
	// string "Status"
	o = append(o, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o, err = msgp.AppendIntf(o, z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// string "Timestamp"
	o = append(o, 0xa9, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70)
	o, err = msgp.AppendIntf(o, z.Timestamp)
	if err != nil {
		err = msgp.WrapError(err, "Timestamp")
		return
	}
	// string "Alt"
	o = append(o, 0xa3, 0x41, 0x6c, 0x74)
	o = msgp.AppendString(o, z.Alt)
	// string "Title"
	o = append(o, 0xa5, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.Title)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FieldImage) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "UploadIdentifier":
			z.UploadIdentifier, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UploadIdentifier")
				return
			}
		case "Fid":
			z.Fid, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Fid")
				return
			}
		case "Data":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Data")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Alt":
					z.Data.Alt, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", "Alt")
						return
					}
				case "Title":
					z.Data.Title, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data", "Title")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Data")
						return
					}
				}
			}
		case "List":
			z.List, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "List")
				return
			}
		case "UID":
			z.UID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "Filename":
			z.Filename, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filename")
				return
			}
		case "Filepath":
			z.Filepath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filepath")
				return
			}
		case "Filemime":
			z.Filemime, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filemime")
				return
			}
		case "Filesize":
			z.Filesize, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filesize")
				return
			}
		case "Status":
			z.Status, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		case "Timestamp":
			z.Timestamp, bts, err = msgp.ReadIntfBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Timestamp")
				return
			}
		case "Alt":
			z.Alt, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Alt")
				return
			}
		case "Title":
			z.Title, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Title")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FieldImage) Msgsize() (s int) {
	s = 1 + 17 + msgp.StringPrefixSize + len(z.UploadIdentifier) + 4 + msgp.StringPrefixSize + len(z.Fid) + 5 + 1 + 4 + msgp.StringPrefixSize + len(z.Data.Alt) + 6 + msgp.StringPrefixSize + len(z.Data.Title) + 5 + msgp.StringPrefixSize + len(z.List) + 4 + msgp.StringPrefixSize + len(z.UID) + 9 + msgp.StringPrefixSize + len(z.Filename) + 9 + msgp.StringPrefixSize + len(z.Filepath) + 9 + msgp.StringPrefixSize + len(z.Filemime) + 9 + msgp.Int64Size + 7 + msgp.GuessSize(z.Status) + 10 + msgp.GuessSize(z.Timestamp) + 4 + msgp.StringPrefixSize + len(z.Alt) + 6 + msgp.StringPrefixSize + len(z.Title)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ImageAttributes) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Resolution":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Resolution")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Resolution")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.Resolution.Height, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "Height")
						return
					}
				case "Width":
					z.Resolution.Width, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "Width")
						return
					}
				case "DPI":
					z.Resolution.DPI, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "DPI")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Resolution")
						return
					}
				}
			}
		case "AltTitle":
			z.AltTitle, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AltTitle")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ImageAttributes) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Resolution"
	// map header, size 3
	// write "Height"
	err = en.Append(0x82, 0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x83, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Resolution.Height)
	if err != nil {
		err = msgp.WrapError(err, "Resolution", "Height")
		return
	}
	// write "Width"
	err = en.Append(0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Resolution.Width)
	if err != nil {
		err = msgp.WrapError(err, "Resolution", "Width")
		return
	}
	// write "DPI"
	err = en.Append(0xa3, 0x44, 0x50, 0x49)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Resolution.DPI)
	if err != nil {
		err = msgp.WrapError(err, "Resolution", "DPI")
		return
	}
	// write "AltTitle"
	err = en.Append(0xa8, 0x41, 0x6c, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.AltTitle)
	if err != nil {
		err = msgp.WrapError(err, "AltTitle")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ImageAttributes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Resolution"
	// map header, size 3
	// string "Height"
	o = append(o, 0x82, 0xaa, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x83, 0xa6, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Resolution.Height)
	// string "Width"
	o = append(o, 0xa5, 0x57, 0x69, 0x64, 0x74, 0x68)
	o = msgp.AppendInt(o, z.Resolution.Width)
	// string "DPI"
	o = append(o, 0xa3, 0x44, 0x50, 0x49)
	o = msgp.AppendInt(o, z.Resolution.DPI)
	// string "AltTitle"
	o = append(o, 0xa8, 0x41, 0x6c, 0x74, 0x54, 0x69, 0x74, 0x6c, 0x65)
	o = msgp.AppendString(o, z.AltTitle)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ImageAttributes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Resolution":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Resolution")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Resolution")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Height":
					z.Resolution.Height, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "Height")
						return
					}
				case "Width":
					z.Resolution.Width, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "Width")
						return
					}
				case "DPI":
					z.Resolution.DPI, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resolution", "DPI")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Resolution")
						return
					}
				}
			}
		case "AltTitle":
			z.AltTitle, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AltTitle")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ImageAttributes) Msgsize() (s int) {
	s = 1 + 11 + 1 + 7 + msgp.IntSize + 6 + msgp.IntSize + 4 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.AltTitle)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NodeQuote) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Price":
			z.Price, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z NodeQuote) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "ID"
	err = en.Append(0x83, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "Price"
	err = en.Append(0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "Volume"
	err = en.Append(0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Volume)
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z NodeQuote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "ID"
	o = append(o, 0x83, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "Price"
	o = append(o, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Price)
	// string "Volume"
	o = append(o, 0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Volume)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NodeQuote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "Price":
			z.Price, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z NodeQuote) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 6 + msgp.StringPrefixSize + len(z.Price) + 7 + msgp.StringPrefixSize + len(z.Volume)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Quote) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Price":
			z.Price, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Quote) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Price"
	err = en.Append(0x82, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Price)
	if err != nil {
		err = msgp.WrapError(err, "Price")
		return
	}
	// write "Volume"
	err = en.Append(0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Volume)
	if err != nil {
		err = msgp.WrapError(err, "Volume")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Quote) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Price"
	o = append(o, 0x82, 0xa5, 0x50, 0x72, 0x69, 0x63, 0x65)
	o = msgp.AppendString(o, z.Price)
	// string "Volume"
	o = append(o, 0xa6, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Volume)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Quote) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Price":
			z.Price, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Price")
				return
			}
		case "Volume":
			z.Volume, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Volume")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Quote) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Price) + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Vocab) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Vocab(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Vocab) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Vocab) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Vocab) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Vocab(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Vocab) Msgsize() (s int) {
	s = msgp.IntSize
	return
}
