package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *MorningstarSector) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndustryCode":
			z.IndustryCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroupCode":
			z.IndustryGroupCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroupCode")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "SectorCode":
			z.SectorCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SectorCode")
				return
			}
		case "Sector":
			z.Sector, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sector")
				return
			}
		case "SuperSectorCode":
			z.SuperSectorCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SuperSectorCode")
				return
			}
		case "SuperSector":
			z.SuperSector, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SuperSector")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MorningstarSector) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "IndustryCode"
	err = en.Append(0x88, 0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryCode)
	if err != nil {
		err = msgp.WrapError(err, "IndustryCode")
		return
	}
	// write "Industry"
	err = en.Append(0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Industry)
	if err != nil {
		err = msgp.WrapError(err, "Industry")
		return
	}
	// write "IndustryGroupCode"
	err = en.Append(0xb1, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryGroupCode)
	if err != nil {
		err = msgp.WrapError(err, "IndustryGroupCode")
		return
	}
	// write "IndustryGroup"
	err = en.Append(0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.IndustryGroup)
	if err != nil {
		err = msgp.WrapError(err, "IndustryGroup")
		return
	}
	// write "SectorCode"
	err = en.Append(0xaa, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SectorCode)
	if err != nil {
		err = msgp.WrapError(err, "SectorCode")
		return
	}
	// write "Sector"
	err = en.Append(0xa6, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sector)
	if err != nil {
		err = msgp.WrapError(err, "Sector")
		return
	}
	// write "SuperSectorCode"
	err = en.Append(0xaf, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SuperSectorCode)
	if err != nil {
		err = msgp.WrapError(err, "SuperSectorCode")
		return
	}
	// write "SuperSector"
	err = en.Append(0xab, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.SuperSector)
	if err != nil {
		err = msgp.WrapError(err, "SuperSector")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MorningstarSector) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "IndustryCode"
	o = append(o, 0x88, 0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.IndustryCode)
	// string "Industry"
	o = append(o, 0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	o = msgp.AppendString(o, z.Industry)
	// string "IndustryGroupCode"
	o = append(o, 0xb1, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.IndustryGroupCode)
	// string "IndustryGroup"
	o = append(o, 0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	o = msgp.AppendString(o, z.IndustryGroup)
	// string "SectorCode"
	o = append(o, 0xaa, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.SectorCode)
	// string "Sector"
	o = append(o, 0xa6, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Sector)
	// string "SuperSectorCode"
	o = append(o, 0xaf, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.SuperSectorCode)
	// string "SuperSector"
	o = append(o, 0xab, 0x53, 0x75, 0x70, 0x65, 0x72, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.SuperSector)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MorningstarSector) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndustryCode":
			z.IndustryCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroupCode":
			z.IndustryGroupCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroupCode")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "SectorCode":
			z.SectorCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SectorCode")
				return
			}
		case "Sector":
			z.Sector, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sector")
				return
			}
		case "SuperSectorCode":
			z.SuperSectorCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SuperSectorCode")
				return
			}
		case "SuperSector":
			z.SuperSector, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SuperSector")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MorningstarSector) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Industry) + 18 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.IndustryGroup) + 11 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Sector) + 16 + msgp.IntSize + 12 + msgp.StringPrefixSize + len(z.SuperSector)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *NAICSSector) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NationalIndustryCode":
			z.NationalIndustryCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "NationalIndustryCode")
				return
			}
		case "NationalIndustry":
			z.NationalIndustry, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NationalIndustry")
				return
			}
		case "IndustryCode":
			z.IndustryCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroupCode":
			z.IndustryGroupCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroupCode")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "SubSectorCode":
			z.SubSectorCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SubSectorCode")
				return
			}
		case "SubSector":
			z.SubSector, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "SubSector")
				return
			}
		case "SectorCode":
			z.SectorCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "SectorCode")
				return
			}
		case "Sector":
			z.Sector, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Sector")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *NAICSSector) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "NationalIndustryCode"
	err = en.Append(0x8a, 0xb4, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.NationalIndustryCode)
	if err != nil {
		err = msgp.WrapError(err, "NationalIndustryCode")
		return
	}
	// write "NationalIndustry"
	err = en.Append(0xb0, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.NationalIndustry)
	if err != nil {
		err = msgp.WrapError(err, "NationalIndustry")
		return
	}
	// write "IndustryCode"
	err = en.Append(0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryCode)
	if err != nil {
		err = msgp.WrapError(err, "IndustryCode")
		return
	}
	// write "Industry"
	err = en.Append(0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Industry)
	if err != nil {
		err = msgp.WrapError(err, "Industry")
		return
	}
	// write "IndustryGroupCode"
	err = en.Append(0xb1, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryGroupCode)
	if err != nil {
		err = msgp.WrapError(err, "IndustryGroupCode")
		return
	}
	// write "IndustryGroup"
	err = en.Append(0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.IndustryGroup)
	if err != nil {
		err = msgp.WrapError(err, "IndustryGroup")
		return
	}
	// write "SubSectorCode"
	err = en.Append(0xad, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SubSectorCode)
	if err != nil {
		err = msgp.WrapError(err, "SubSectorCode")
		return
	}
	// write "SubSector"
	err = en.Append(0xa9, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.SubSector)
	if err != nil {
		err = msgp.WrapError(err, "SubSector")
		return
	}
	// write "SectorCode"
	err = en.Append(0xaa, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.SectorCode)
	if err != nil {
		err = msgp.WrapError(err, "SectorCode")
		return
	}
	// write "Sector"
	err = en.Append(0xa6, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Sector)
	if err != nil {
		err = msgp.WrapError(err, "Sector")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NAICSSector) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "NationalIndustryCode"
	o = append(o, 0x8a, 0xb4, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.NationalIndustryCode)
	// string "NationalIndustry"
	o = append(o, 0xb0, 0x4e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	o = msgp.AppendString(o, z.NationalIndustry)
	// string "IndustryCode"
	o = append(o, 0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.IndustryCode)
	// string "Industry"
	o = append(o, 0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	o = msgp.AppendString(o, z.Industry)
	// string "IndustryGroupCode"
	o = append(o, 0xb1, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.IndustryGroupCode)
	// string "IndustryGroup"
	o = append(o, 0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	o = msgp.AppendString(o, z.IndustryGroup)
	// string "SubSectorCode"
	o = append(o, 0xad, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.SubSectorCode)
	// string "SubSector"
	o = append(o, 0xa9, 0x53, 0x75, 0x62, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.SubSector)
	// string "SectorCode"
	o = append(o, 0xaa, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.SectorCode)
	// string "Sector"
	o = append(o, 0xa6, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Sector)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NAICSSector) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NationalIndustryCode":
			z.NationalIndustryCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NationalIndustryCode")
				return
			}
		case "NationalIndustry":
			z.NationalIndustry, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NationalIndustry")
				return
			}
		case "IndustryCode":
			z.IndustryCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroupCode":
			z.IndustryGroupCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroupCode")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "SubSectorCode":
			z.SubSectorCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubSectorCode")
				return
			}
		case "SubSector":
			z.SubSector, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubSector")
				return
			}
		case "SectorCode":
			z.SectorCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SectorCode")
				return
			}
		case "Sector":
			z.Sector, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sector")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NAICSSector) Msgsize() (s int) {
	s = 1 + 21 + msgp.IntSize + 17 + msgp.StringPrefixSize + len(z.NationalIndustry) + 13 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Industry) + 18 + msgp.IntSize + 14 + msgp.StringPrefixSize + len(z.IndustryGroup) + 14 + msgp.IntSize + 10 + msgp.StringPrefixSize + len(z.SubSector) + 11 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Sector)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PartnerMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "RevisionID":
			z.RevisionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "RevisionID")
				return
			}
		case "Updated":
			err = z.Updated.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "Published":
			err = z.Published.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "Resource":
			z.Resource, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Resource")
				return
			}
		case "Copyright":
			z.Copyright, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "Contact":
			z.Contact, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Contact")
				return
			}
		case "Taxonomies":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Taxonomies")
				return
			}
			if cap(z.Taxonomies) >= int(zb0002) {
				z.Taxonomies = (z.Taxonomies)[:zb0002]
			} else {
				z.Taxonomies = make([]string, zb0002)
			}
			for za0001 := range z.Taxonomies {
				z.Taxonomies[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Taxonomies", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PartnerMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 8
	// write "ID"
	err = en.Append(0x88, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "RevisionID"
	err = en.Append(0xaa, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.RevisionID)
	if err != nil {
		err = msgp.WrapError(err, "RevisionID")
		return
	}
	// write "Updated"
	err = en.Append(0xa7, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Updated.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	// write "Published"
	err = en.Append(0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	if err != nil {
		return
	}
	err = z.Published.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Published")
		return
	}
	// write "Resource"
	err = en.Append(0xa8, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Resource)
	if err != nil {
		err = msgp.WrapError(err, "Resource")
		return
	}
	// write "Copyright"
	err = en.Append(0xa9, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Copyright)
	if err != nil {
		err = msgp.WrapError(err, "Copyright")
		return
	}
	// write "Contact"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Contact)
	if err != nil {
		err = msgp.WrapError(err, "Contact")
		return
	}
	// write "Taxonomies"
	err = en.Append(0xaa, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Taxonomies)))
	if err != nil {
		err = msgp.WrapError(err, "Taxonomies")
		return
	}
	for za0001 := range z.Taxonomies {
		err = en.WriteString(z.Taxonomies[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Taxonomies", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PartnerMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 8
	// string "ID"
	o = append(o, 0x88, 0xa2, 0x49, 0x44)
	o = msgp.AppendString(o, z.ID)
	// string "RevisionID"
	o = append(o, 0xaa, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.RevisionID)
	// string "Updated"
	o = append(o, 0xa7, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64)
	o, err = z.Updated.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Updated")
		return
	}
	// string "Published"
	o = append(o, 0xa9, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64)
	o, err = z.Published.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Published")
		return
	}
	// string "Resource"
	o = append(o, 0xa8, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65)
	o = msgp.AppendString(o, z.Resource)
	// string "Copyright"
	o = append(o, 0xa9, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendString(o, z.Copyright)
	// string "Contact"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74)
	o = msgp.AppendString(o, z.Contact)
	// string "Taxonomies"
	o = append(o, 0xaa, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Taxonomies)))
	for za0001 := range z.Taxonomies {
		o = msgp.AppendString(o, z.Taxonomies[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PartnerMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "RevisionID":
			z.RevisionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RevisionID")
				return
			}
		case "Updated":
			bts, err = z.Updated.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Updated")
				return
			}
		case "Published":
			bts, err = z.Published.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Published")
				return
			}
		case "Resource":
			z.Resource, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Resource")
				return
			}
		case "Copyright":
			z.Copyright, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Copyright")
				return
			}
		case "Contact":
			z.Contact, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Contact")
				return
			}
		case "Taxonomies":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Taxonomies")
				return
			}
			if cap(z.Taxonomies) >= int(zb0002) {
				z.Taxonomies = (z.Taxonomies)[:zb0002]
			} else {
				z.Taxonomies = make([]string, zb0002)
			}
			for za0001 := range z.Taxonomies {
				z.Taxonomies[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Taxonomies", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PartnerMeta) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 11 + msgp.StringPrefixSize + len(z.RevisionID) + 8 + z.Updated.Msgsize() + 10 + z.Published.Msgsize() + 9 + msgp.StringPrefixSize + len(z.Resource) + 10 + msgp.StringPrefixSize + len(z.Copyright) + 8 + msgp.StringPrefixSize + len(z.Contact) + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Taxonomies {
		s += msgp.StringPrefixSize + len(z.Taxonomies[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PartnerTaxonomy) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Symbol":
			z.Symbol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Symbol")
				return
			}
		case "Name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Exchange":
			z.Exchange, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Exchange")
				return
			}
		case "ISIN":
			z.ISIN, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ISIN")
				return
			}
		case "CIK":
			z.CIK, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CIK")
				return
			}
		case "CUSIP":
			z.CUSIP, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CUSIP")
				return
			}
		case "Order":
			z.Order, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Order")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PartnerTaxonomy) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 7
	// write "Symbol"
	err = en.Append(0x87, 0xa6, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.Symbol)
	if err != nil {
		err = msgp.WrapError(err, "Symbol")
		return
	}
	// write "Name"
	err = en.Append(0xa4, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "Exchange"
	err = en.Append(0xa8, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Exchange)
	if err != nil {
		err = msgp.WrapError(err, "Exchange")
		return
	}
	// write "ISIN"
	err = en.Append(0xa4, 0x49, 0x53, 0x49, 0x4e)
	if err != nil {
		return
	}
	err = en.WriteString(z.ISIN)
	if err != nil {
		err = msgp.WrapError(err, "ISIN")
		return
	}
	// write "CIK"
	err = en.Append(0xa3, 0x43, 0x49, 0x4b)
	if err != nil {
		return
	}
	err = en.WriteString(z.CIK)
	if err != nil {
		err = msgp.WrapError(err, "CIK")
		return
	}
	// write "CUSIP"
	err = en.Append(0xa5, 0x43, 0x55, 0x53, 0x49, 0x50)
	if err != nil {
		return
	}
	err = en.WriteString(z.CUSIP)
	if err != nil {
		err = msgp.WrapError(err, "CUSIP")
		return
	}
	// write "Order"
	err = en.Append(0xa5, 0x4f, 0x72, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Order)
	if err != nil {
		err = msgp.WrapError(err, "Order")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PartnerTaxonomy) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 7
	// string "Symbol"
	o = append(o, 0x87, 0xa6, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.Symbol)
	// string "Name"
	o = append(o, 0xa4, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "Exchange"
	o = append(o, 0xa8, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65)
	o = msgp.AppendString(o, z.Exchange)
	// string "ISIN"
	o = append(o, 0xa4, 0x49, 0x53, 0x49, 0x4e)
	o = msgp.AppendString(o, z.ISIN)
	// string "CIK"
	o = append(o, 0xa3, 0x43, 0x49, 0x4b)
	o = msgp.AppendString(o, z.CIK)
	// string "CUSIP"
	o = append(o, 0xa5, 0x43, 0x55, 0x53, 0x49, 0x50)
	o = msgp.AppendString(o, z.CUSIP)
	// string "Order"
	o = append(o, 0xa5, 0x4f, 0x72, 0x64, 0x65, 0x72)
	o = msgp.AppendString(o, z.Order)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PartnerTaxonomy) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Symbol":
			z.Symbol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Symbol")
				return
			}
		case "Name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "Exchange":
			z.Exchange, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Exchange")
				return
			}
		case "ISIN":
			z.ISIN, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ISIN")
				return
			}
		case "CIK":
			z.CIK, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CIK")
				return
			}
		case "CUSIP":
			z.CUSIP, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CUSIP")
				return
			}
		case "Order":
			z.Order, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Order")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PartnerTaxonomy) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Symbol) + 5 + msgp.StringPrefixSize + len(z.Name) + 9 + msgp.StringPrefixSize + len(z.Exchange) + 5 + msgp.StringPrefixSize + len(z.ISIN) + 4 + msgp.StringPrefixSize + len(z.CIK) + 6 + msgp.StringPrefixSize + len(z.CUSIP) + 6 + msgp.StringPrefixSize + len(z.Order)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *PartnerTaxonomyMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Taxonomies":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Taxonomies")
				return
			}
			if cap(z.Taxonomies) >= int(zb0002) {
				z.Taxonomies = (z.Taxonomies)[:zb0002]
			} else {
				z.Taxonomies = make([]PartnerTaxonomy, zb0002)
			}
			for za0001 := range z.Taxonomies {
				err = z.Taxonomies[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Taxonomies", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PartnerTaxonomyMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Taxonomies"
	err = en.Append(0x81, 0xaa, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Taxonomies)))
	if err != nil {
		err = msgp.WrapError(err, "Taxonomies")
		return
	}
	for za0001 := range z.Taxonomies {
		err = z.Taxonomies[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Taxonomies", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PartnerTaxonomyMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Taxonomies"
	o = append(o, 0x81, 0xaa, 0x54, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Taxonomies)))
	for za0001 := range z.Taxonomies {
		o, err = z.Taxonomies[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Taxonomies", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PartnerTaxonomyMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Taxonomies":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Taxonomies")
				return
			}
			if cap(z.Taxonomies) >= int(zb0002) {
				z.Taxonomies = (z.Taxonomies)[:zb0002]
			} else {
				z.Taxonomies = make([]PartnerTaxonomy, zb0002)
			}
			for za0001 := range z.Taxonomies {
				bts, err = z.Taxonomies[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Taxonomies", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PartnerTaxonomyMeta) Msgsize() (s int) {
	s = 1 + 11 + msgp.ArrayHeaderSize
	for za0001 := range z.Taxonomies {
		s += z.Taxonomies[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SECMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccessionNumber":
			z.AccessionNumber, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "AccessionNumber")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z SECMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "AccessionNumber"
	err = en.Append(0x81, 0xaf, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.AccessionNumber)
	if err != nil {
		err = msgp.WrapError(err, "AccessionNumber")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SECMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "AccessionNumber"
	o = append(o, 0x81, 0xaf, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72)
	o = msgp.AppendString(o, z.AccessionNumber)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SECMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "AccessionNumber":
			z.AccessionNumber, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AccessionNumber")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SECMeta) Msgsize() (s int) {
	s = 1 + 16 + msgp.StringPrefixSize + len(z.AccessionNumber)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SICSector) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndustryCode":
			z.IndustryCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "MajorGroup":
			z.MajorGroup, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "MajorGroup")
				return
			}
		case "Division":
			z.Division, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Division")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SICSector) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "IndustryCode"
	err = en.Append(0x85, 0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryCode)
	if err != nil {
		err = msgp.WrapError(err, "IndustryCode")
		return
	}
	// write "Industry"
	err = en.Append(0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Industry)
	if err != nil {
		err = msgp.WrapError(err, "Industry")
		return
	}
	// write "IndustryGroup"
	err = en.Append(0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt(z.IndustryGroup)
	if err != nil {
		err = msgp.WrapError(err, "IndustryGroup")
		return
	}
	// write "MajorGroup"
	err = en.Append(0xaa, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt(z.MajorGroup)
	if err != nil {
		err = msgp.WrapError(err, "MajorGroup")
		return
	}
	// write "Division"
	err = en.Append(0xa8, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Division)
	if err != nil {
		err = msgp.WrapError(err, "Division")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SICSector) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "IndustryCode"
	o = append(o, 0x85, 0xac, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.IndustryCode)
	// string "Industry"
	o = append(o, 0xa8, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79)
	o = msgp.AppendString(o, z.Industry)
	// string "IndustryGroup"
	o = append(o, 0xad, 0x49, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70)
	o = msgp.AppendInt(o, z.IndustryGroup)
	// string "MajorGroup"
	o = append(o, 0xaa, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70)
	o = msgp.AppendInt(o, z.MajorGroup)
	// string "Division"
	o = append(o, 0xa8, 0x44, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Division)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SICSector) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IndustryCode":
			z.IndustryCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryCode")
				return
			}
		case "Industry":
			z.Industry, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Industry")
				return
			}
		case "IndustryGroup":
			z.IndustryGroup, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IndustryGroup")
				return
			}
		case "MajorGroup":
			z.MajorGroup, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "MajorGroup")
				return
			}
		case "Division":
			z.Division, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Division")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SICSector) Msgsize() (s int) {
	s = 1 + 13 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Industry) + 14 + msgp.IntSize + 11 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Division)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SectorMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SIC":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "SIC")
				return
			}
			if cap(z.SIC) >= int(zb0002) {
				z.SIC = (z.SIC)[:zb0002]
			} else {
				z.SIC = make([]SICSector, zb0002)
			}
			for za0001 := range z.SIC {
				err = z.SIC[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "SIC", za0001)
					return
				}
			}
		case "NAICS":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "NAICS")
				return
			}
			if cap(z.NAICS) >= int(zb0003) {
				z.NAICS = (z.NAICS)[:zb0003]
			} else {
				z.NAICS = make([]NAICSSector, zb0003)
			}
			for za0002 := range z.NAICS {
				err = z.NAICS[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "NAICS", za0002)
					return
				}
			}
		case "Morningstar":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Morningstar")
				return
			}
			if cap(z.Morningstar) >= int(zb0004) {
				z.Morningstar = (z.Morningstar)[:zb0004]
			} else {
				z.Morningstar = make([]MorningstarSector, zb0004)
			}
			for za0003 := range z.Morningstar {
				err = z.Morningstar[za0003].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Morningstar", za0003)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SectorMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "SIC"
	err = en.Append(0x83, 0xa3, 0x53, 0x49, 0x43)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.SIC)))
	if err != nil {
		err = msgp.WrapError(err, "SIC")
		return
	}
	for za0001 := range z.SIC {
		err = z.SIC[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "SIC", za0001)
			return
		}
	}
	// write "NAICS"
	err = en.Append(0xa5, 0x4e, 0x41, 0x49, 0x43, 0x53)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.NAICS)))
	if err != nil {
		err = msgp.WrapError(err, "NAICS")
		return
	}
	for za0002 := range z.NAICS {
		err = z.NAICS[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "NAICS", za0002)
			return
		}
	}
	// write "Morningstar"
	err = en.Append(0xab, 0x4d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x72)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Morningstar)))
	if err != nil {
		err = msgp.WrapError(err, "Morningstar")
		return
	}
	for za0003 := range z.Morningstar {
		err = z.Morningstar[za0003].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Morningstar", za0003)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SectorMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "SIC"
	o = append(o, 0x83, 0xa3, 0x53, 0x49, 0x43)
	o = msgp.AppendArrayHeader(o, uint32(len(z.SIC)))
	for za0001 := range z.SIC {
		o, err = z.SIC[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "SIC", za0001)
			return
		}
	}
	// string "NAICS"
	o = append(o, 0xa5, 0x4e, 0x41, 0x49, 0x43, 0x53)
	o = msgp.AppendArrayHeader(o, uint32(len(z.NAICS)))
	for za0002 := range z.NAICS {
		o, err = z.NAICS[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "NAICS", za0002)
			return
		}
	}
	// string "Morningstar"
	o = append(o, 0xab, 0x4d, 0x6f, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x74, 0x61, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Morningstar)))
	for za0003 := range z.Morningstar {
		o, err = z.Morningstar[za0003].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Morningstar", za0003)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SectorMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SIC":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SIC")
				return
			}
			if cap(z.SIC) >= int(zb0002) {
				z.SIC = (z.SIC)[:zb0002]
			} else {
				z.SIC = make([]SICSector, zb0002)
			}
			for za0001 := range z.SIC {
				bts, err = z.SIC[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SIC", za0001)
					return
				}
			}
		case "NAICS":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NAICS")
				return
			}
			if cap(z.NAICS) >= int(zb0003) {
				z.NAICS = (z.NAICS)[:zb0003]
			} else {
				z.NAICS = make([]NAICSSector, zb0003)
			}
			for za0002 := range z.NAICS {
				bts, err = z.NAICS[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "NAICS", za0002)
					return
				}
			}
		case "Morningstar":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Morningstar")
				return
			}
			if cap(z.Morningstar) >= int(zb0004) {
				z.Morningstar = (z.Morningstar)[:zb0004]
			} else {
				z.Morningstar = make([]MorningstarSector, zb0004)
			}
			for za0003 := range z.Morningstar {
				bts, err = z.Morningstar[za0003].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Morningstar", za0003)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SectorMeta) Msgsize() (s int) {
	s = 1 + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.SIC {
		s += z.SIC[za0001].Msgsize()
	}
	s += 6 + msgp.ArrayHeaderSize
	for za0002 := range z.NAICS {
		s += z.NAICS[za0002].Msgsize()
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0003 := range z.Morningstar {
		s += z.Morningstar[za0003].Msgsize()
	}
	return
}
