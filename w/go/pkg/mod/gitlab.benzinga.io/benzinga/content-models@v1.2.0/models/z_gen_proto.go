package models

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExcludeBody":
			z.ExcludeBody, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "ExcludeBody")
				return
			}
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "ExcludeBody"
	err = en.Append(0x82, 0xab, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBool(z.ExcludeBody)
	if err != nil {
		err = msgp.WrapError(err, "ExcludeBody")
		return
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "ExcludeBody"
	o = append(o, 0x82, 0xab, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendBool(o, z.ExcludeBody)
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ExcludeBody":
			z.ExcludeBody, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ExcludeBody")
				return
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthRequest) Msgsize() (s int) {
	s = 1 + 12 + msgp.BoolSize + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *AuthResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z AuthResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "RequestID"
	err = en.Append(0x81, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuthResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "RequestID"
	o = append(o, 0x81, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuthResponse) Msgsize() (s int) {
	s = 1 + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConnectRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Mode":
			z.Mode, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ConnectRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Version"
	err = en.Append(0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "Mode"
	err = en.Append(0xa4, 0x4d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ConnectRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Version"
	o = append(o, 0x82, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.Version)
	// string "Mode"
	o = append(o, 0xa4, 0x4d, 0x6f, 0x64, 0x65)
	o = msgp.AppendString(o, z.Mode)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "Mode":
			z.Mode, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ConnectRequest) Msgsize() (s int) {
	s = 1 + 8 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Mode)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConnectResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Status":
			z.Status, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ConnectResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Status"
	err = en.Append(0x81, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.Status)
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ConnectResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Status"
	o = append(o, 0x81, 0xa6, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, z.Status)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConnectResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Status":
			z.Status, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Status")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ConnectResponse) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Status)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Cursor) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastDate":
			err = z.LastDate.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LastDate")
				return
			}
		case "LastNID":
			z.LastNID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "LastNID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Cursor) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "LastDate"
	err = en.Append(0x82, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.LastDate.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LastDate")
		return
	}
	// write "LastNID"
	err = en.Append(0xa7, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.LastNID)
	if err != nil {
		err = msgp.WrapError(err, "LastNID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Cursor) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "LastDate"
	o = append(o, 0x82, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	o, err = z.LastDate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LastDate")
		return
	}
	// string "LastNID"
	o = append(o, 0xa7, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x49, 0x44)
	o = msgp.AppendInt(o, z.LastNID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Cursor) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "LastDate":
			bts, err = z.LastDate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastDate")
				return
			}
		case "LastNID":
			z.LastNID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LastNID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Cursor) Msgsize() (s int) {
	s = 1 + 9 + z.LastDate.Msgsize() + 8 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Event) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "NodeID":
			z.NodeID, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "Time":
			err = z.Time.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Content":
			err = z.Content.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "Event":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Event")
					return
				}
				z.Event = EventType(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Event) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "ID"
	err = en.Append(0x85, 0xa2, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "NodeID"
	err = en.Append(0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.NodeID)
	if err != nil {
		err = msgp.WrapError(err, "NodeID")
		return
	}
	// write "Time"
	err = en.Append(0xa4, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = z.Time.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// write "Content"
	err = en.Append(0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = z.Content.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "Event"
	err = en.Append(0xa5, 0x45, 0x76, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.Event))
	if err != nil {
		err = msgp.WrapError(err, "Event")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Event) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "ID"
	o = append(o, 0x85, 0xa2, 0x49, 0x44)
	o = msgp.AppendInt64(o, z.ID)
	// string "NodeID"
	o = append(o, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44)
	o = msgp.AppendInt64(o, z.NodeID)
	// string "Time"
	o = append(o, 0xa4, 0x54, 0x69, 0x6d, 0x65)
	o, err = z.Time.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Time")
		return
	}
	// string "Content"
	o = append(o, 0xa7, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o, err = z.Content.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// string "Event"
	o = append(o, 0xa5, 0x45, 0x76, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, string(z.Event))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Event) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ID":
			z.ID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "NodeID":
			z.NodeID, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeID")
				return
			}
		case "Time":
			bts, err = z.Time.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Time")
				return
			}
		case "Content":
			bts, err = z.Content.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "Event":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Event")
					return
				}
				z.Event = EventType(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Event) Msgsize() (s int) {
	s = 1 + 3 + msgp.Int64Size + 7 + msgp.Int64Size + 5 + z.Time.Msgsize() + 8 + z.Content.Msgsize() + 6 + msgp.StringPrefixSize + len(string(z.Event))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EventType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EventType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EventType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EventType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EventType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EventType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EventType) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Filter) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Keywords":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Keywords")
				return
			}
			if cap(z.Keywords) >= int(zb0002) {
				z.Keywords = (z.Keywords)[:zb0002]
			} else {
				z.Keywords = make([]string, zb0002)
			}
			for za0001 := range z.Keywords {
				z.Keywords[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Keywords", za0001)
					return
				}
			}
		case "Symbols":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Symbols")
				return
			}
			if cap(z.Symbols) >= int(zb0003) {
				z.Symbols = (z.Symbols)[:zb0003]
			} else {
				z.Symbols = make([]string, zb0003)
			}
			for za0002 := range z.Symbols {
				z.Symbols[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Symbols", za0002)
					return
				}
			}
		case "Channels":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Channels")
				return
			}
			if cap(z.Channels) >= int(zb0004) {
				z.Channels = (z.Channels)[:zb0004]
			} else {
				z.Channels = make([]int, zb0004)
			}
			for za0003 := range z.Channels {
				z.Channels[za0003], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Channels", za0003)
					return
				}
			}
		case "ContentType":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
			if cap(z.ContentType) >= int(zb0005) {
				z.ContentType = (z.ContentType)[:zb0005]
			} else {
				z.ContentType = make([]string, zb0005)
			}
			for za0004 := range z.ContentType {
				z.ContentType[za0004], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ContentType", za0004)
					return
				}
			}
		case "Sectors":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sectors")
				return
			}
			if cap(z.Sectors) >= int(zb0006) {
				z.Sectors = (z.Sectors)[:zb0006]
			} else {
				z.Sectors = make([]string, zb0006)
			}
			for za0005 := range z.Sectors {
				z.Sectors[za0005], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Sectors", za0005)
					return
				}
			}
		case "Sentiments":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Sentiments")
				return
			}
			if cap(z.Sentiments) >= int(zb0007) {
				z.Sentiments = (z.Sentiments)[:zb0007]
			} else {
				z.Sentiments = make([]int, zb0007)
			}
			for za0006 := range z.Sentiments {
				z.Sentiments[za0006], err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "Sentiments", za0006)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Filter) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "Keywords"
	err = en.Append(0x86, 0xa8, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Keywords)))
	if err != nil {
		err = msgp.WrapError(err, "Keywords")
		return
	}
	for za0001 := range z.Keywords {
		err = en.WriteString(z.Keywords[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Keywords", za0001)
			return
		}
	}
	// write "Symbols"
	err = en.Append(0xa7, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Symbols)))
	if err != nil {
		err = msgp.WrapError(err, "Symbols")
		return
	}
	for za0002 := range z.Symbols {
		err = en.WriteString(z.Symbols[za0002])
		if err != nil {
			err = msgp.WrapError(err, "Symbols", za0002)
			return
		}
	}
	// write "Channels"
	err = en.Append(0xa8, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Channels)))
	if err != nil {
		err = msgp.WrapError(err, "Channels")
		return
	}
	for za0003 := range z.Channels {
		err = en.WriteInt(z.Channels[za0003])
		if err != nil {
			err = msgp.WrapError(err, "Channels", za0003)
			return
		}
	}
	// write "ContentType"
	err = en.Append(0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ContentType)))
	if err != nil {
		err = msgp.WrapError(err, "ContentType")
		return
	}
	for za0004 := range z.ContentType {
		err = en.WriteString(z.ContentType[za0004])
		if err != nil {
			err = msgp.WrapError(err, "ContentType", za0004)
			return
		}
	}
	// write "Sectors"
	err = en.Append(0xa7, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sectors)))
	if err != nil {
		err = msgp.WrapError(err, "Sectors")
		return
	}
	for za0005 := range z.Sectors {
		err = en.WriteString(z.Sectors[za0005])
		if err != nil {
			err = msgp.WrapError(err, "Sectors", za0005)
			return
		}
	}
	// write "Sentiments"
	err = en.Append(0xaa, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Sentiments)))
	if err != nil {
		err = msgp.WrapError(err, "Sentiments")
		return
	}
	for za0006 := range z.Sentiments {
		err = en.WriteInt(z.Sentiments[za0006])
		if err != nil {
			err = msgp.WrapError(err, "Sentiments", za0006)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Filter) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "Keywords"
	o = append(o, 0x86, 0xa8, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Keywords)))
	for za0001 := range z.Keywords {
		o = msgp.AppendString(o, z.Keywords[za0001])
	}
	// string "Symbols"
	o = append(o, 0xa7, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Symbols)))
	for za0002 := range z.Symbols {
		o = msgp.AppendString(o, z.Symbols[za0002])
	}
	// string "Channels"
	o = append(o, 0xa8, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Channels)))
	for za0003 := range z.Channels {
		o = msgp.AppendInt(o, z.Channels[za0003])
	}
	// string "ContentType"
	o = append(o, 0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ContentType)))
	for za0004 := range z.ContentType {
		o = msgp.AppendString(o, z.ContentType[za0004])
	}
	// string "Sectors"
	o = append(o, 0xa7, 0x53, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sectors)))
	for za0005 := range z.Sectors {
		o = msgp.AppendString(o, z.Sectors[za0005])
	}
	// string "Sentiments"
	o = append(o, 0xaa, 0x53, 0x65, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Sentiments)))
	for za0006 := range z.Sentiments {
		o = msgp.AppendInt(o, z.Sentiments[za0006])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Filter) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Keywords":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Keywords")
				return
			}
			if cap(z.Keywords) >= int(zb0002) {
				z.Keywords = (z.Keywords)[:zb0002]
			} else {
				z.Keywords = make([]string, zb0002)
			}
			for za0001 := range z.Keywords {
				z.Keywords[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Keywords", za0001)
					return
				}
			}
		case "Symbols":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Symbols")
				return
			}
			if cap(z.Symbols) >= int(zb0003) {
				z.Symbols = (z.Symbols)[:zb0003]
			} else {
				z.Symbols = make([]string, zb0003)
			}
			for za0002 := range z.Symbols {
				z.Symbols[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Symbols", za0002)
					return
				}
			}
		case "Channels":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Channels")
				return
			}
			if cap(z.Channels) >= int(zb0004) {
				z.Channels = (z.Channels)[:zb0004]
			} else {
				z.Channels = make([]int, zb0004)
			}
			for za0003 := range z.Channels {
				z.Channels[za0003], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Channels", za0003)
					return
				}
			}
		case "ContentType":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
			if cap(z.ContentType) >= int(zb0005) {
				z.ContentType = (z.ContentType)[:zb0005]
			} else {
				z.ContentType = make([]string, zb0005)
			}
			for za0004 := range z.ContentType {
				z.ContentType[za0004], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ContentType", za0004)
					return
				}
			}
		case "Sectors":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sectors")
				return
			}
			if cap(z.Sectors) >= int(zb0006) {
				z.Sectors = (z.Sectors)[:zb0006]
			} else {
				z.Sectors = make([]string, zb0006)
			}
			for za0005 := range z.Sectors {
				z.Sectors[za0005], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sectors", za0005)
					return
				}
			}
		case "Sentiments":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Sentiments")
				return
			}
			if cap(z.Sentiments) >= int(zb0007) {
				z.Sentiments = (z.Sentiments)[:zb0007]
			} else {
				z.Sentiments = make([]int, zb0007)
			}
			for za0006 := range z.Sentiments {
				z.Sentiments[za0006], bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Sentiments", za0006)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Filter) Msgsize() (s int) {
	s = 1 + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Keywords {
		s += msgp.StringPrefixSize + len(z.Keywords[za0001])
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0002 := range z.Symbols {
		s += msgp.StringPrefixSize + len(z.Symbols[za0002])
	}
	s += 9 + msgp.ArrayHeaderSize + (len(z.Channels) * (msgp.IntSize)) + 12 + msgp.ArrayHeaderSize
	for za0004 := range z.ContentType {
		s += msgp.StringPrefixSize + len(z.ContentType[za0004])
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0005 := range z.Sectors {
		s += msgp.StringPrefixSize + len(z.Sectors[za0005])
	}
	s += 11 + msgp.ArrayHeaderSize + (len(z.Sentiments) * (msgp.IntSize))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Search":
			z.Search, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Search")
				return
			}
		case "Filter":
			err = z.Filter.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Filter")
				return
			}
		case "Range":
			err = z.Range.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Range")
				return
			}
		case "Cursor":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Cursor")
					return
				}
				switch msgp.UnsafeString(field) {
				case "LastDate":
					err = z.Cursor.LastDate.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Cursor", "LastDate")
						return
					}
				case "LastNID":
					z.Cursor.LastNID, err = dc.ReadInt()
					if err != nil {
						err = msgp.WrapError(err, "Cursor", "LastNID")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Cursor")
						return
					}
				}
			}
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "Search"
	err = en.Append(0x85, 0xa6, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.Search)
	if err != nil {
		err = msgp.WrapError(err, "Search")
		return
	}
	// write "Filter"
	err = en.Append(0xa6, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Filter.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Filter")
		return
	}
	// write "Range"
	err = en.Append(0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65)
	if err != nil {
		return
	}
	err = z.Range.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Range")
		return
	}
	// write "Cursor"
	// map header, size 2
	// write "LastDate"
	err = en.Append(0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x82, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.Cursor.LastDate.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Cursor", "LastDate")
		return
	}
	// write "LastNID"
	err = en.Append(0xa7, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Cursor.LastNID)
	if err != nil {
		err = msgp.WrapError(err, "Cursor", "LastNID")
		return
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "Search"
	o = append(o, 0x85, 0xa6, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68)
	o = msgp.AppendString(o, z.Search)
	// string "Filter"
	o = append(o, 0xa6, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72)
	o, err = z.Filter.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Filter")
		return
	}
	// string "Range"
	o = append(o, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65)
	o, err = z.Range.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Range")
		return
	}
	// string "Cursor"
	// map header, size 2
	// string "LastDate"
	o = append(o, 0xa6, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x82, 0xa8, 0x4c, 0x61, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	o, err = z.Cursor.LastDate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Cursor", "LastDate")
		return
	}
	// string "LastNID"
	o = append(o, 0xa7, 0x4c, 0x61, 0x73, 0x74, 0x4e, 0x49, 0x44)
	o = msgp.AppendInt(o, z.Cursor.LastNID)
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Search":
			z.Search, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Search")
				return
			}
		case "Filter":
			bts, err = z.Filter.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Filter")
				return
			}
		case "Range":
			bts, err = z.Range.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Range")
				return
			}
		case "Cursor":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Cursor")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cursor")
					return
				}
				switch msgp.UnsafeString(field) {
				case "LastDate":
					bts, err = z.Cursor.LastDate.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cursor", "LastDate")
						return
					}
				case "LastNID":
					z.Cursor.LastNID, bts, err = msgp.ReadIntBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cursor", "LastNID")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Cursor")
						return
					}
				}
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryRequest) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.Search) + 7 + z.Filter.Msgsize() + 6 + z.Range.Msgsize() + 7 + 1 + 9 + z.Cursor.LastDate.Msgsize() + 8 + msgp.IntSize + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QueryResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "Count":
			z.Count, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "Error":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "Results":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]Content, zb0002)
			}
			for za0001 := range z.Results {
				err = z.Results[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *QueryResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "RequestID"
	err = en.Append(0x84, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	// write "Count"
	err = en.Append(0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Count)
	if err != nil {
		err = msgp.WrapError(err, "Count")
		return
	}
	// write "Error"
	err = en.Append(0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "Results"
	err = en.Append(0xa7, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Results)))
	if err != nil {
		err = msgp.WrapError(err, "Results")
		return
	}
	for za0001 := range z.Results {
		err = z.Results[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *QueryResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "RequestID"
	o = append(o, 0x84, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	// string "Count"
	o = append(o, 0xa5, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.Count)
	// string "Error"
	o = append(o, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Error)
	// string "Results"
	o = append(o, 0xa7, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Results)))
	for za0001 := range z.Results {
		o, err = z.Results[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Results", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QueryResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		case "Count":
			z.Count, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Count")
				return
			}
		case "Error":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "Results":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Results")
				return
			}
			if cap(z.Results) >= int(zb0002) {
				z.Results = (z.Results)[:zb0002]
			} else {
				z.Results = make([]Content, zb0002)
			}
			for za0001 := range z.Results {
				bts, err = z.Results[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Results", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *QueryResponse) Msgsize() (s int) {
	s = 1 + 10 + msgp.IntSize + 6 + msgp.IntSize + 6 + msgp.StringPrefixSize + len(z.Error) + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Results {
		s += z.Results[za0001].Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Range) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "EarliestDate":
			err = z.EarliestDate.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "EarliestDate")
				return
			}
		case "LatestDate":
			err = z.LatestDate.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "LatestDate")
				return
			}
		case "Before":
			err = z.Before.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Before")
				return
			}
		case "Limit":
			z.Limit, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		case "Skip":
			z.Skip, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Skip")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Range) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "EarliestDate"
	err = en.Append(0x85, 0xac, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.EarliestDate.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "EarliestDate")
		return
	}
	// write "LatestDate"
	err = en.Append(0xaa, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = z.LatestDate.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "LatestDate")
		return
	}
	// write "Before"
	err = en.Append(0xa6, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65)
	if err != nil {
		return
	}
	err = z.Before.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Before")
		return
	}
	// write "Limit"
	err = en.Append(0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Limit)
	if err != nil {
		err = msgp.WrapError(err, "Limit")
		return
	}
	// write "Skip"
	err = en.Append(0xa4, 0x53, 0x6b, 0x69, 0x70)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Skip)
	if err != nil {
		err = msgp.WrapError(err, "Skip")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Range) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "EarliestDate"
	o = append(o, 0x85, 0xac, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	o, err = z.EarliestDate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "EarliestDate")
		return
	}
	// string "LatestDate"
	o = append(o, 0xaa, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65)
	o, err = z.LatestDate.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "LatestDate")
		return
	}
	// string "Before"
	o = append(o, 0xa6, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65)
	o, err = z.Before.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Before")
		return
	}
	// string "Limit"
	o = append(o, 0xa5, 0x4c, 0x69, 0x6d, 0x69, 0x74)
	o = msgp.AppendInt(o, z.Limit)
	// string "Skip"
	o = append(o, 0xa4, 0x53, 0x6b, 0x69, 0x70)
	o = msgp.AppendInt(o, z.Skip)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Range) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "EarliestDate":
			bts, err = z.EarliestDate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "EarliestDate")
				return
			}
		case "LatestDate":
			bts, err = z.LatestDate.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "LatestDate")
				return
			}
		case "Before":
			bts, err = z.Before.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Before")
				return
			}
		case "Limit":
			z.Limit, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Limit")
				return
			}
		case "Skip":
			z.Skip, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Skip")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Range) Msgsize() (s int) {
	s = 1 + 13 + z.EarliestDate.Msgsize() + 11 + z.LatestDate.Msgsize() + 7 + z.Before.Msgsize() + 6 + msgp.IntSize + 5 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StoryBodyRequest) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StoryID":
			z.StoryID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StoryID")
				return
			}
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StoryBodyRequest) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "StoryID"
	err = en.Append(0x82, 0xa7, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.StoryID)
	if err != nil {
		err = msgp.WrapError(err, "StoryID")
		return
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StoryBodyRequest) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "StoryID"
	o = append(o, 0x82, 0xa7, 0x53, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x44)
	o = msgp.AppendString(o, z.StoryID)
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoryBodyRequest) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "StoryID":
			z.StoryID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StoryID")
				return
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StoryBodyRequest) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.StoryID) + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StoryBodyResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Body":
			z.Body, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "Error":
			z.Error, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "RequestID":
			z.RequestID, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StoryBodyResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Body"
	err = en.Append(0x83, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	// write "Error"
	err = en.Append(0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Error)
	if err != nil {
		err = msgp.WrapError(err, "Error")
		return
	}
	// write "RequestID"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RequestID)
	if err != nil {
		err = msgp.WrapError(err, "RequestID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StoryBodyResponse) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Body"
	o = append(o, 0x83, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendString(o, z.Body)
	// string "Error"
	o = append(o, 0xa5, 0x45, 0x72, 0x72, 0x6f, 0x72)
	o = msgp.AppendString(o, z.Error)
	// string "RequestID"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x44)
	o = msgp.AppendInt(o, z.RequestID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StoryBodyResponse) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Body":
			z.Body, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "Error":
			z.Error, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Error")
				return
			}
		case "RequestID":
			z.RequestID, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RequestID")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StoryBodyResponse) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Body) + 6 + msgp.StringPrefixSize + len(z.Error) + 10 + msgp.IntSize
	return
}
